{"ast":null,"code":"/*import { createContext, useState, useEffect } from \"react\";\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport default AuthContext;\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  let [authTokens, setAuthTokens] = useState(null);\r\n  let [user, setUser] = useState(null);\r\n\r\n  let loginUser = async (e) => {\r\n    e.preventDefault();\r\n\r\n    let response = fetch(\"http://127.0.0.1:8000/api/token/\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        username: e.target.username.value,\r\n        password: e.target.password.value,\r\n      }),\r\n    });\r\n    let data = await response.json();\r\n    console.log(\"data:\", data);\r\n  };\r\n\r\n  let contextData = {\r\n    loginUser: loginUser,\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={contextData}>{children}</AuthContext.Provider>\r\n  );\r\n};\r\n */","map":{"version":3,"sources":["C:/Users/arcan/Desktop/frontend/src/context/AuthContext.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["/*import { createContext, useState, useEffect } from \"react\";\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport default AuthContext;\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  let [authTokens, setAuthTokens] = useState(null);\r\n  let [user, setUser] = useState(null);\r\n\r\n  let loginUser = async (e) => {\r\n    e.preventDefault();\r\n\r\n    let response = fetch(\"http://127.0.0.1:8000/api/token/\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        username: e.target.username.value,\r\n        password: e.target.password.value,\r\n      }),\r\n    });\r\n    let data = await response.json();\r\n    console.log(\"data:\", data);\r\n  };\r\n\r\n  let contextData = {\r\n    loginUser: loginUser,\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={contextData}>{children}</AuthContext.Provider>\r\n  );\r\n};\r\n */"]},"metadata":{},"sourceType":"module"}