{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\arcan\\\\Desktop\\\\frontend\\\\src\\\\context\\\\AuthContext.js\",\n    _s = $RefreshSig$();\n\n/*import { createContext, useState, useEffect } from \"react\";\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport default AuthContext;\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  let [authTokens, setAuthTokens] = useState(null);\r\n  let [user, setUser] = useState(null);\r\n\r\n  let loginUser = async (e) => {\r\n    e.preventDefault();\r\n\r\n    let response = fetch(\"http://127.0.0.1:8000/api/token/\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        username: e.target.username.value,\r\n        password: e.target.password.value,\r\n      }),\r\n    });\r\n    let data = await response.json();\r\n    console.log(\"data:\", data);\r\n  };\r\n\r\n  let contextData = {\r\n    loginUser: loginUser,\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={contextData}>{children}</AuthContext.Provider>\r\n  );\r\n};\r\n */\nimport { createContext, useState, useEffect } from 'react';\nimport jwt_decode from \"jwt-decode\";\nimport { useHistory } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport default AuthContext;\nexport const AuthProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  let [authTokens, setAuthTokens] = useState(() => localStorage.getItem('authTokens') ? JSON.parse(localStorage.getItem('authTokens')) : null);\n  let [user, setUser] = useState(() => localStorage.getItem('authTokens') ? jwt_decode(localStorage.getItem('authTokens')) : null);\n  let [loading, setLoading] = useState(true);\n  const history = useHistory();\n\n  let loginUser = async e => {\n    e.preventDefault();\n    let response = await fetch('http://127.0.0.1:8000/api/token/', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        'username': e.target.username.value,\n        'password': e.target.password.value\n      })\n    });\n    let data = await response.json();\n\n    if (response.status === 200) {\n      setAuthTokens(data);\n      setUser(jwt_decode(data.access));\n      localStorage.setItem('authTokens', JSON.stringify(data));\n      history.push('/');\n    } else {\n      alert('Something went wrong!');\n    }\n  };\n\n  let logoutUser = () => {\n    setAuthTokens(null);\n    setUser(null);\n    localStorage.removeItem('authTokens');\n    history.push('/login');\n  };\n\n  let updateToken = async () => {\n    let response = await fetch('http://127.0.0.1:8000/api/token/refresh/', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        'refresh': authTokens === null || authTokens === void 0 ? void 0 : authTokens.refresh\n      })\n    });\n    let data = await response.json();\n\n    if (response.status === 200) {\n      setAuthTokens(data);\n      setUser(jwt_decode(data.access));\n      localStorage.setItem('authTokens', JSON.stringify(data));\n    } else {\n      logoutUser();\n    }\n\n    if (loading) {\n      setLoading(false);\n    }\n  };\n\n  let contextData = {\n    user: user,\n    authTokens: authTokens,\n    loginUser: loginUser,\n    logoutUser: logoutUser\n  };\n  useEffect(() => {\n    if (loading) {\n      updateToken();\n    }\n\n    let fourMinutes = 1000 * 60 * 4;\n    let interval = setInterval(() => {\n      if (authTokens) {\n        updateToken();\n      }\n    }, fourMinutes);\n    return () => clearInterval(interval);\n  }, [authTokens, loading]);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: contextData,\n    children: loading ? null : children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 135,\n    columnNumber: 9\n  }, this);\n};\n\n_s(AuthProvider, \"aBbTXfZfqHsHQ1PD0tesWqDhSTA=\", false, function () {\n  return [useHistory];\n});\n\n_c = AuthProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"sources":["C:/Users/arcan/Desktop/frontend/src/context/AuthContext.js"],"names":["createContext","useState","useEffect","jwt_decode","useHistory","AuthContext","AuthProvider","children","authTokens","setAuthTokens","localStorage","getItem","JSON","parse","user","setUser","loading","setLoading","history","loginUser","e","preventDefault","response","fetch","method","headers","body","stringify","target","username","value","password","data","json","status","access","setItem","push","alert","logoutUser","removeItem","updateToken","refresh","contextData","fourMinutes","interval","setInterval","clearInterval"],"mappings":"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","sourcesContent":["/*import { createContext, useState, useEffect } from \"react\";\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport default AuthContext;\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  let [authTokens, setAuthTokens] = useState(null);\r\n  let [user, setUser] = useState(null);\r\n\r\n  let loginUser = async (e) => {\r\n    e.preventDefault();\r\n\r\n    let response = fetch(\"http://127.0.0.1:8000/api/token/\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        username: e.target.username.value,\r\n        password: e.target.password.value,\r\n      }),\r\n    });\r\n    let data = await response.json();\r\n    console.log(\"data:\", data);\r\n  };\r\n\r\n  let contextData = {\r\n    loginUser: loginUser,\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={contextData}>{children}</AuthContext.Provider>\r\n  );\r\n};\r\n */\r\n\r\nimport { createContext, useState, useEffect } from 'react'\r\nimport jwt_decode from \"jwt-decode\";\r\nimport { useHistory } from 'react-router-dom'\r\n\r\nconst AuthContext = createContext()\r\n\r\nexport default AuthContext;\r\n\r\n\r\nexport const AuthProvider = ({children}) => {\r\n    let [authTokens, setAuthTokens] = useState(()=> localStorage.getItem('authTokens') ? JSON.parse(localStorage.getItem('authTokens')) : null)\r\n    let [user, setUser] = useState(()=> localStorage.getItem('authTokens') ? jwt_decode(localStorage.getItem('authTokens')) : null)\r\n    let [loading, setLoading] = useState(true)\r\n\r\n    const history = useHistory()\r\n\r\n    let loginUser = async (e )=> {\r\n        e.preventDefault()\r\n        let response = await fetch('http://127.0.0.1:8000/api/token/', {\r\n            method:'POST',\r\n            headers:{\r\n                'Content-Type':'application/json'\r\n            },\r\n            body:JSON.stringify({'username':e.target.username.value, 'password':e.target.password.value})\r\n        })\r\n        let data = await response.json()\r\n\r\n        if(response.status === 200){\r\n            setAuthTokens(data)\r\n            setUser(jwt_decode(data.access))\r\n            localStorage.setItem('authTokens', JSON.stringify(data))\r\n            history.push('/')\r\n        }else{\r\n            alert('Something went wrong!')\r\n        }\r\n    }\r\n\r\n\r\n    let logoutUser = () => {\r\n        setAuthTokens(null)\r\n        setUser(null)\r\n        localStorage.removeItem('authTokens')\r\n        history.push('/login')\r\n    }\r\n\r\n\r\n    let updateToken = async ()=> {\r\n\r\n        let response = await fetch('http://127.0.0.1:8000/api/token/refresh/', {\r\n            method:'POST',\r\n            headers:{\r\n                'Content-Type':'application/json'\r\n            },\r\n            body:JSON.stringify({'refresh':authTokens?.refresh})\r\n        })\r\n\r\n        let data = await response.json()\r\n        \r\n        if (response.status === 200){\r\n            setAuthTokens(data)\r\n            setUser(jwt_decode(data.access))\r\n            localStorage.setItem('authTokens', JSON.stringify(data))\r\n        }else{\r\n            logoutUser()\r\n        }\r\n\r\n        if(loading){\r\n            setLoading(false)\r\n        }\r\n    }\r\n\r\n    let contextData = {\r\n        user:user,\r\n        authTokens:authTokens,\r\n        loginUser:loginUser,\r\n        logoutUser:logoutUser,\r\n    }\r\n\r\n\r\n    useEffect(()=> {\r\n\r\n        if(loading){\r\n            updateToken()\r\n        }\r\n\r\n        let fourMinutes = 1000 * 60 * 4\r\n\r\n        let interval =  setInterval(()=> {\r\n            if(authTokens){\r\n                updateToken()\r\n            }\r\n        }, fourMinutes)\r\n        return ()=> clearInterval(interval)\r\n\r\n    }, [authTokens, loading])\r\n\r\n    return(\r\n        <AuthContext.Provider value={contextData} >\r\n            {loading ? null : children}\r\n        </AuthContext.Provider>\r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}