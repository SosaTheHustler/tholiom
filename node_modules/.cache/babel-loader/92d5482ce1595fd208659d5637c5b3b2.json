{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\arcan\\\\Desktop\\\\frontend\\\\src\\\\context\\\\AuthContext.js\",\n    _s = $RefreshSig$();\n\nimport { createContext, useState, useEffect } from \"react\";\nimport jwt_decode from \"jwt-decode\";\nimport { useHistory } from \"react-router\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport default AuthContext;\nexport const AuthProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  let [authTokens, setAuthTokens] = useState(() => localStorage.getItem(\"authTokens\") ? JSON.parse(localStorage.getItem(\"authTokens\")) : null);\n  let [user, setUser] = useState(() => localStorage.getItem(\"authTokens\") ? jwt_decode(localStorage.getItem(\"authTokens\")) : null);\n  let [loading, setLoading] = useState(true);\n  const history = useHistory();\n\n  let loginUser = async e => {\n    e.preventDefault();\n    let response = await fetch(\"http://127.0.0.1:8000/api/token/\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        username: e.target.username.value,\n        password: e.target.password.value\n      })\n    });\n    let data = await response.json();\n\n    if (response.status === 200) {\n      setAuthTokens(data);\n      setUser(jwt_decode(data.access));\n      localStorage.setItem(\"authTokens\", JSON.stringify(data));\n      history.push(\"/\");\n    } else {\n      alert(\"Something went wrong!\");\n    }\n  };\n\n  let logoutUser = () => {\n    setAuthTokens(null);\n    setUser(null);\n    localStorage.removeItem(\"authToken\");\n    history.push(\"/login\");\n  };\n\n  let updateToken = async () => {\n    console.log(\"updated\");\n    let response = await fetch(\"http://127.0.0.1:8000/api/token/refresh/\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        refresh: authTokens.refresh\n      })\n    });\n    let data = await response.json();\n\n    if (response.status === 200) {\n      setAuthTokens(data);\n      setUser(jwt_decode(data.access));\n      localStorage.setItem(\"authTokens\", JSON.stringify(data));\n    } else {\n      logoutUser();\n    }\n  };\n\n  let contextData = {\n    user: user,\n    loginUser: loginUser,\n    logoutUser: logoutUser\n  };\n  useEffect(() => {\n    let fourMinutes = 1000 * 60 * 4;\n    let interval = setInterval(() => {\n      if (authTokens) {\n        updateToken();\n      }\n    }, fourMinutes);\n    return () => clearInterval(interval);\n  }, [authTokens, loading]);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: contextData,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AuthProvider, \"D1MD6c7RmwGkEF+t8D1bp5QQTVk=\", false, function () {\n  return [useHistory];\n});\n\n_c = AuthProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"sources":["C:/Users/arcan/Desktop/frontend/src/context/AuthContext.js"],"names":["createContext","useState","useEffect","jwt_decode","useHistory","AuthContext","AuthProvider","children","authTokens","setAuthTokens","localStorage","getItem","JSON","parse","user","setUser","loading","setLoading","history","loginUser","e","preventDefault","response","fetch","method","headers","body","stringify","username","target","value","password","data","json","status","access","setItem","push","alert","logoutUser","removeItem","updateToken","console","log","refresh","contextData","fourMinutes","interval","setInterval","clearInterval"],"mappings":";;;AAAA,SAASA,aAAT,EAAwBC,QAAxB,EAAkCC,SAAlC,QAAmD,OAAnD;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,SAASC,UAAT,QAA2B,cAA3B;;AAEA,MAAMC,WAAW,gBAAGL,aAAa,EAAjC;AAEA,eAAeK,WAAf;AAEA,OAAO,MAAMC,YAAY,GAAG,QAAkB;AAAA;;AAAA,MAAjB;AAAEC,IAAAA;AAAF,GAAiB;AAC5C,MAAI,CAACC,UAAD,EAAaC,aAAb,IAA8BR,QAAQ,CAAC,MACzCS,YAAY,CAACC,OAAb,CAAqB,YAArB,IACIC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,YAArB,CAAX,CADJ,GAEI,IAHoC,CAA1C;AAKA,MAAI,CAACG,IAAD,EAAOC,OAAP,IAAkBd,QAAQ,CAAC,MAC7BS,YAAY,CAACC,OAAb,CAAqB,YAArB,IACIR,UAAU,CAACO,YAAY,CAACC,OAAb,CAAqB,YAArB,CAAD,CADd,GAEI,IAHwB,CAA9B;AAMA,MAAI,CAACK,OAAD,EAAUC,UAAV,IAAwBhB,QAAQ,CAAC,IAAD,CAApC;AAEA,QAAMiB,OAAO,GAAGd,UAAU,EAA1B;;AAEA,MAAIe,SAAS,GAAG,MAAOC,CAAP,IAAa;AAC3BA,IAAAA,CAAC,CAACC,cAAF;AAEA,QAAIC,QAAQ,GAAG,MAAMC,KAAK,CAAC,kCAAD,EAAqC;AAC7DC,MAAAA,MAAM,EAAE,MADqD;AAE7DC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OAFoD;AAK7DC,MAAAA,IAAI,EAAEd,IAAI,CAACe,SAAL,CAAe;AACnBC,QAAAA,QAAQ,EAAER,CAAC,CAACS,MAAF,CAASD,QAAT,CAAkBE,KADT;AAEnBC,QAAAA,QAAQ,EAAEX,CAAC,CAACS,MAAF,CAASE,QAAT,CAAkBD;AAFT,OAAf;AALuD,KAArC,CAA1B;AAUA,QAAIE,IAAI,GAAG,MAAMV,QAAQ,CAACW,IAAT,EAAjB;;AACA,QAAIX,QAAQ,CAACY,MAAT,KAAoB,GAAxB,EAA6B;AAC3BzB,MAAAA,aAAa,CAACuB,IAAD,CAAb;AACAjB,MAAAA,OAAO,CAACZ,UAAU,CAAC6B,IAAI,CAACG,MAAN,CAAX,CAAP;AACAzB,MAAAA,YAAY,CAAC0B,OAAb,CAAqB,YAArB,EAAmCxB,IAAI,CAACe,SAAL,CAAeK,IAAf,CAAnC;AACAd,MAAAA,OAAO,CAACmB,IAAR,CAAa,GAAb;AACD,KALD,MAKO;AACLC,MAAAA,KAAK,CAAC,uBAAD,CAAL;AACD;AACF,GAtBD;;AAwBA,MAAIC,UAAU,GAAG,MAAM;AACrB9B,IAAAA,aAAa,CAAC,IAAD,CAAb;AACAM,IAAAA,OAAO,CAAC,IAAD,CAAP;AACAL,IAAAA,YAAY,CAAC8B,UAAb,CAAwB,WAAxB;AACAtB,IAAAA,OAAO,CAACmB,IAAR,CAAa,QAAb;AACD,GALD;;AAOA,MAAII,WAAW,GAAG,YAAY;AAC5BC,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACA,QAAIrB,QAAQ,GAAG,MAAMC,KAAK,CAAC,0CAAD,EAA6C;AACrEC,MAAAA,MAAM,EAAE,MAD6D;AAErEC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OAF4D;AAKrEC,MAAAA,IAAI,EAAEd,IAAI,CAACe,SAAL,CAAe;AACnBiB,QAAAA,OAAO,EAAEpC,UAAU,CAACoC;AADD,OAAf;AAL+D,KAA7C,CAA1B;AASA,QAAIZ,IAAI,GAAG,MAAMV,QAAQ,CAACW,IAAT,EAAjB;;AAEA,QAAIX,QAAQ,CAACY,MAAT,KAAoB,GAAxB,EAA6B;AAC3BzB,MAAAA,aAAa,CAACuB,IAAD,CAAb;AACAjB,MAAAA,OAAO,CAACZ,UAAU,CAAC6B,IAAI,CAACG,MAAN,CAAX,CAAP;AACAzB,MAAAA,YAAY,CAAC0B,OAAb,CAAqB,YAArB,EAAmCxB,IAAI,CAACe,SAAL,CAAeK,IAAf,CAAnC;AACD,KAJD,MAIO;AACLO,MAAAA,UAAU;AACX;AACF,GApBD;;AAsBA,MAAIM,WAAW,GAAG;AAChB/B,IAAAA,IAAI,EAAEA,IADU;AAEhBK,IAAAA,SAAS,EAAEA,SAFK;AAGhBoB,IAAAA,UAAU,EAAEA;AAHI,GAAlB;AAMArC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI4C,WAAW,GAAG,OAAO,EAAP,GAAY,CAA9B;AACA,QAAIC,QAAQ,GAAGC,WAAW,CAAC,MAAM;AAC/B,UAAIxC,UAAJ,EAAgB;AACdiC,QAAAA,WAAW;AACZ;AACF,KAJyB,EAIvBK,WAJuB,CAA1B;AAKA,WAAO,MAAMG,aAAa,CAACF,QAAD,CAA1B;AACD,GARQ,EAQN,CAACvC,UAAD,EAAaQ,OAAb,CARM,CAAT;AAUA,sBACE,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE6B,WAA7B;AAAA,cAA2CtC;AAA3C;AAAA;AAAA;AAAA;AAAA,UADF;AAGD,CAxFM;;GAAMD,Y;UAcKF,U;;;KAdLE,Y","sourcesContent":["import { createContext, useState, useEffect } from \"react\";\r\nimport jwt_decode from \"jwt-decode\";\r\nimport { useHistory } from \"react-router\";\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport default AuthContext;\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  let [authTokens, setAuthTokens] = useState(() =>\r\n    localStorage.getItem(\"authTokens\")\r\n      ? JSON.parse(localStorage.getItem(\"authTokens\"))\r\n      : null\r\n  );\r\n  let [user, setUser] = useState(() =>\r\n    localStorage.getItem(\"authTokens\")\r\n      ? jwt_decode(localStorage.getItem(\"authTokens\"))\r\n      : null\r\n  );\r\n\r\n  let [loading, setLoading] = useState(true);\r\n\r\n  const history = useHistory();\r\n\r\n  let loginUser = async (e) => {\r\n    e.preventDefault();\r\n\r\n    let response = await fetch(\"http://127.0.0.1:8000/api/token/\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        username: e.target.username.value,\r\n        password: e.target.password.value,\r\n      }),\r\n    });\r\n    let data = await response.json();\r\n    if (response.status === 200) {\r\n      setAuthTokens(data);\r\n      setUser(jwt_decode(data.access));\r\n      localStorage.setItem(\"authTokens\", JSON.stringify(data));\r\n      history.push(\"/\");\r\n    } else {\r\n      alert(\"Something went wrong!\");\r\n    }\r\n  };\r\n\r\n  let logoutUser = () => {\r\n    setAuthTokens(null);\r\n    setUser(null);\r\n    localStorage.removeItem(\"authToken\");\r\n    history.push(\"/login\");\r\n  };\r\n\r\n  let updateToken = async () => {\r\n    console.log(\"updated\");\r\n    let response = await fetch(\"http://127.0.0.1:8000/api/token/refresh/\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        refresh: authTokens.refresh,\r\n      }),\r\n    });\r\n    let data = await response.json();\r\n\r\n    if (response.status === 200) {\r\n      setAuthTokens(data);\r\n      setUser(jwt_decode(data.access));\r\n      localStorage.setItem(\"authTokens\", JSON.stringify(data));\r\n    } else {\r\n      logoutUser();\r\n    }\r\n  };\r\n\r\n  let contextData = {\r\n    user: user,\r\n    loginUser: loginUser,\r\n    logoutUser: logoutUser,\r\n  };\r\n\r\n  useEffect(() => {\r\n    let fourMinutes = 1000 * 60 * 4;\r\n    let interval = setInterval(() => {\r\n      if (authTokens) {\r\n        updateToken();\r\n      }\r\n    }, fourMinutes);\r\n    return () => clearInterval(interval);\r\n  }, [authTokens, loading]);\r\n\r\n  return (\r\n    <AuthContext.Provider value={contextData}>{children}</AuthContext.Provider>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}